// Signature file for parser generated by fsyacc
module DenizenScriptParser
type token = 
  | EOF
  | COMMENT
  | IDENTIFIER of (string)
  | INSTANTKEYWORD of (string)
  | KEYWORD of (string)
  | DQUOTE
  | SQUOTE
  | LTAG
  | RTAG
  | LBRACKET
  | RBRACKET
  | FLOAT of (float)
  | INT of (int)
  | STRING of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMENT
    | TOKEN_IDENTIFIER
    | TOKEN_INSTANTKEYWORD
    | TOKEN_KEYWORD
    | TOKEN_DQUOTE
    | TOKEN_SQUOTE
    | TOKEN_LTAG
    | TOKEN_RTAG
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_STRING
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (string) 
